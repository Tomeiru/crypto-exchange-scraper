name: Continuous Integration

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main

jobs:
  setup_cache:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node: [ latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

  build:
    needs: setup_cache
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node: [ latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Setup Prisma
        run: npx prisma generate

      - name: Run build
        run: npm run build

  style:
    needs: setup_cache
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [latest]
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Setup Prisma
        run: npx prisma generate

      - name: Run code style check
        run: npm run lint

  format:
    needs: setup_cache
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [latest]
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Setup Prisma
        run: npx prisma generate

      - name: Run code format check
        run: npm run format

  test:
    needs: setup_cache
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [latest]
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Setup prisma
        run: npx prisma generate

      - name: Run tests
        run: npm run test


  integration_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [latest]
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Environment file copy
        run: cp .env.sample .env

      - name: Build docker compose
        run: docker compose build

      - name: Migrate database
        run: docker compose run --entrypoint npx api prisma migrate deploy

      - name: Run Integration tests
        run: docker compose run -e COIN_MARKET_CAP_API_KEY=${{ secrets.COIN_MARKET_CAP_API_KEY }} --entrypoint npm api run test:e2e
